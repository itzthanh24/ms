{"version":3,"sources":["assets/img/bomb.png","components/minesweeper/form/form.jsx","components/minesweeper/form/error.jsx","components/minesweeper/board/cell.jsx","helper/index.js","game.js","components/minesweeper/board/board.jsx","components/minesweeper/form/result.jsx","components/minesweeper/rules.jsx","components/minesweeper/mineSweeper.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Form","props","inputValues","handleInputChange","handleFormSubmit","className","name","onSubmit","htmlFor","type","id","placeholder","value","onChange","onClick","Error","errorMessage","errorMsg","Cell","isClicked","adjBombs","cellWidth","rowIndex","colIndex","handleCellClick","fontSize","bombImgPath","Bomb","cellStyles","styles","width","style","alt","src","getNeighbors","board","row","col","getTopCell","getTopRightCell","getRightCell","getBottomRightCell","getBottomCell","getBottomLeftCell","getLeftCell","getTopLeftCell","filter","neighbor","fillBoard","neighbors","initBoard","rows","cols","bombs","boardRow","push","length","flattenedBoard","randomPosition","Math","floor","random","randomX","randomY","splice","placeBombs","Board","remainingSafeCells","changeRemainingSafeCells","gameOver","setGameStatus","useState","setBoard","clickedCell","setClickedCell","isInitialRender","useRef","useEffect","current","result","isGameOver","revealedBoard","newBoard","revealBoard","e","rowCol","target","split","parseInt","makeMove","makeMoveRecursively","height","map","key","cell","Result","resultMsg","gameStart","newGame","Rules","Minesweeper","setGameStart","setGameOver","setRemainingSafeCells","columns","setInputValues","isError","msg","error","setError","formProps","preventDefault","dimension","pattern","test","replace","toUpperCase","errorProps","boardProps","gameStatus","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.49cb26c2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bomb.647259d5.png\";","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './form.css';\n\n/**\n * Form provides inputs to obtain number of rows, columns, and bombs to initialize the board.\n * @param {FormProps} props form properties\n * @returns {JSX.Element} form view\n */\n\n/**\n * @typedef {Object} FormProps\n * @prop {Object} inputValues input values\n * @prop {function} handleInputChange function to handle input change\n * @prop {function} handleFormSubmit function to handle form submit\n */\n\nconst Form = props => {\n    const { inputValues, handleInputChange, handleFormSubmit } = props;\n    return (\n        <div>\n            <form className='ms-form' name='form' onSubmit={handleFormSubmit}>\n                <div className='row'>\n                <div className='ms-form-group form-group col-md-3'>\n                    <label className='ms-form-label' htmlFor='columns'>\n                        Columns <i className='ms-label-icon label-icon material-icons'>view_column</i>\n                    </label>\n                    <div className='input-group'>\n                        <input className='ms-form-input form-control' type='text' name='columns' id='columns' \n                            placeholder='# of columns' value={inputValues['columns']} onChange={handleInputChange} />\n                    </div>\n                </div>\n                <div className='ms-form-group form-group col-md-3 offset-md-1'>\n                    <label className='ms-form-label' htmlFor='rows'> \n                        Rows <i className='ms-label-icon label-icon material-icons'>view_stream</i>\n                    </label>\n                    <div className='input-group'>\n                        <input className='ms-form-input form-control' type='text' name='rows' id='rows' \n                        placeholder='# of rows' value={inputValues['rows']} onChange={handleInputChange} />\n                    </div>\n                </div>\n                <div className='ms-form-group form-group col-md-3 offset-md-1'>\n                    <label className='ms-form-label' htmlFor='bombs'> \n                        Bombs <i className='ms-label-icon label-icon material-icons'>adjust</i>\n                    </label>\n                    <div className='input-group'>\n                        <input className='ms-form-input form-control' type='text' name='bombs' id='bombs' \n                        placeholder='# of bombs' value={inputValues['bombs']} onChange={handleInputChange} />\n                    </div>\n                </div>\n                </div>\n                <div className='row'>\n                    <button type='submit' className='ms-form-submit btn text-center col-md-3 offset-md-4' onClick={handleFormSubmit}>Submit</button>\n                </div>\n            </form>\n        </div>\n    );\n}\n\nForm.propTypes = {\n    inputValues: PropTypes.object.isRequired,\n    handleInputChange: PropTypes.func.isRequired,\n    handleFormSubmit: PropTypes.func.isRequired\n};\n\nexport default Form;","import React from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * Error renders any input errors.\n * @param {ErrorProps} props error properties\n * @returns {JSX.Element} Error view\n */\n\n/**\n * @typedef {Object} ErrorProps\n * @prop {string} errorMessage error message to display\n */\n\nconst Error = props => {\n    const errorMessage = props.errorMsg;\n    return (\n        <div className='ms-error'>\n            <p className='ms-error-msg'>{errorMessage}</p>\n        </div>\n    );\n}\n\nError.propTypes = {\n    errorMessage: PropTypes.string\n};\n\nexport default Error;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Bomb from '../../../assets/img/bomb.png';\n\n/**\n * Clickable cell that makes up the board.\n * @param {CellProps} props cell properties\n * @returns {JSX.Element} cell view\n */\n\n/**\n * @typedef {Object} CellProps\n * @prop {boolean} isClicked cell clicked\n * @prop {number} adjBombs number of adjacent bombs\n * @prop {number} rowIndex row index\n * @prop {number} colIndex column index\n * @prop {number} cellWidth cell width\n * @prop {function} handleCellClick function to handle cell click\n */\n\nconst Cell = props => {\n    const { isClicked, adjBombs, cellWidth, rowIndex, colIndex, handleCellClick } = props;\n    const clickedClassName = 'clicked';\n    const bombClassName = 'bomb';\n    const fontSize = cellWidth <= 4 ? '0.5em' : '';\n    const bombImgPath = Bomb;\n\n    const cellStyles = {\n        styles: {\n            width: `${cellWidth}%`,\n            fontSize: fontSize\n        }\n    }\n    \n    return (\n        <button \n            className={'ms-row-button' + (isClicked ? ` ${clickedClassName}`: '') +\n                (adjBombs === -1 ? ` ${bombClassName}` : '')} \n            style={cellStyles.styles}\n            value={`${rowIndex}-${colIndex}`} \n            onClick={handleCellClick}>\n            {isClicked && adjBombs !== -1 && adjBombs > 0 ? `${adjBombs}` : ''}\n            {isClicked && adjBombs === -1 ? \n                <img className='ms-row-button-bomb' alt='bomb' src={bombImgPath} /> : ''}\n        </button>\n    );\n}\n\nCell.propTypes = {\n    isClicked: PropTypes.bool.isRequired, \n    adjBombs: PropTypes.number.isRequired, \n    rowIndex: PropTypes.number.isRequired, \n    colIndex: PropTypes.number.isRequired, \n    cellWidth: PropTypes.number.isRequired,\n    handleCellClick: PropTypes.func.isRequired\n};\n\nexport default Cell;","/**\n * Get all the neighboring cells given the board and coordinates.\n * @param {Object[]} board array of cell objects\n * @param {number} row row index\n * @param {number} col col index\n * @returns {Object[]} neighbors array of cell objects\n */\nexport const getNeighbors = (board, row, col) => {\n    const topCell = getTopCell(board, row, col);\n    const topRightCell = getTopRightCell(board, row, col);\n    const rightCell = getRightCell(board, row, col);\n    const bottomRightCell = getBottomRightCell(board, row, col);\n    const bottomCell = getBottomCell(board, row, col);\n    const bottomLeftCell = getBottomLeftCell(board, row, col);\n    const leftCell = getLeftCell(board, row, col);\n    const topLeftCell = getTopLeftCell(board, row, col);\n    let neighbors = [topCell, topRightCell, rightCell, bottomRightCell, \n        bottomCell, bottomLeftCell, leftCell, topLeftCell];\n    return neighbors.filter(neighbor => neighbor);\n}\n\n/**\n * Get the top cell given the board and coordinates.\n * @param {Object[]} board array of cell objects\n * @param {number} row row index\n * @param {number} col col index\n * @returns {Object} cell cell object if it exists or 0\n */\nconst getTopCell = (board, row, col) => {\n    return (board[row-1] || [])[col] ? board[row-1][col] : 0;\n}\n\n/**\n * Get the top right cell given the board and coordinates.\n * @param {Object[]} board array of cell objects\n * @param {number} row row index\n * @param {number} col col index\n * @returns {Object} cell cell object if it exists or 0\n */\nconst getTopRightCell = (board, row, col) => {\n    return (board[row-1] || [])[col+1] ? board[row-1][col+1] : 0;\n}\n\n/**\n * Get the right cell given the board and coordinates.\n * @param {Object[]} board array of cell objects\n * @param {number} row row index\n * @param {number} col col index\n * @returns {Object} cell cell object if it exists or 0\n */\nconst getRightCell = (board, row, col) => {\n    return board[row][col+1] ? board[row][col+1] : 0;\n}\n\n/**\n * Get the bottom right cell given the board and coordinates.\n * @param {Object[]} board array of cell objects\n * @param {number} row row index\n * @param {number} col col index\n * @returns {Object} cell cell object if it exists or 0\n */\nconst getBottomRightCell = (board, row, col) => {\n    return (board[row+1] || [])[col+1] ? board[row+1][col+1] : 0;\n}\n\n/**\n * Get the bottom cell given the board and coordinates.\n * @param {Object[]} board array of cell objects\n * @param {number} row row index\n * @param {number} col col index\n * @returns {Object} cell cell object if it exists or 0\n */\nconst getBottomCell = (board, row, col) => {\n    return (board[row+1] || [])[col] ? board[row+1][col] : 0;\n}\n\n/**\n * Get the bottom left cell given the board and coordinates.\n * @param {Object[]} board array of cell objects\n * @param {number} row row index\n * @param {number} col col index\n * @returns {Object} cell cell object if it exists or 0\n */\nconst getBottomLeftCell = (board, row, col) => {\n    return (board[row+1] || [])[col-1] ? board[row+1][col-1] : 0;\n}\n\n/**\n * Get the left cell given the board and coordinates.\n * @param {Object[]} board array of cell objects\n * @param {number} row row index\n * @param {number} col col index\n * @returns {Object} cell cell object if it exists or 0\n */\nconst getLeftCell = (board, row, col) => {\n    return board[row][col-1] ? board[row][col-1] : 0;\n}\n\n/**\n * Get the top left cell given the board and coordinates.\n * @param {Object[]} board array of cell objects\n * @param {number} row row index\n * @param {number} col col index\n * @returns {Object} cell cell object if it exists or 0\n */\nconst getTopLeftCell = (board, row, col) => {\n    return (board[row-1] || [])[col-1] ? board[row-1][col-1] : 0;\n}","import { getNeighbors } from './helper';\n\n/**\n * Game logic that is responsible for checking user move,\n * providing the initial and subsequent updated boards for \n * rendering.\n */\n\n/**\n * Fill the cells adjacent to the bombs with the correct\n * value.\n * @param {Object[]} board array of cell objects\n * @param {number} row row index\n * @param {number} col col index\n * @returns {Object[]} board array of cell objects\n */\nconst fillBoard = (board, row, col) => {\n    let neighbors = getNeighbors(board, row, col);\n    for (let neighbor of neighbors) {\n        if (neighbor.adjBombs !== -1) {\n            neighbor.adjBombs++;\n        }\n    }\n    return board;\n}\n\n/**\n * Place the bombs in random positions (avoiding duplicates)\n * on the board.\n * @param {Object[]} board array of cell objects\n * @param {number} bombs number of bombs\n * @returns {Object[]} board array of cell objects\n */\nconst placeBombs = (board, bombs) => {\n    const [ rows, cols ] = [board.length, board[0].length];\n    let flattenedBoard = [];\n    for (let row = 0; row < rows; row++) {\n        for (let col = 0; col < cols; col++) {\n            flattenedBoard.push({row, col});\n        }\n    }\n    \n    while (bombs) {\n        const randomPosition = Math.floor(Math.random() * flattenedBoard.length);\n        const randomX = flattenedBoard[randomPosition].col;\n        const randomY = flattenedBoard[randomPosition].row;\n        board[randomY][randomX].adjBombs = -1;\n        fillBoard(board, randomY, randomX);\n        flattenedBoard.splice(randomPosition, 1);\n        bombs--;\n    }\n    return board;\n}\n\n/**\n * Initialize the board for initial render. Creates the board then\n * places the bombs.\n * @param {number} row number of rows\n * @param {number} col number of columns\n * @param {number} bombs number of bombs\n * @returns {Object[]} board array of cell objects\n */\nconst initBoard = (rows, cols, bombs) => {\n    let board = [];\n    for (let row = 0; row < rows; row++) {\n        let boardRow = [];\n        for (let col = 0; col < cols; col++) {\n            boardRow.push({isClicked: false, adjBombs: 0, row, col});\n        }\n        board.push(boardRow);\n    }\n    board = placeBombs(board, bombs);\n    return board;\n}\n\n/**\n * Check the board to see if the game is over when user makes\n * a move.\n * @param {Object[]} board array of cell objects\n * @param {number} row row index\n * @param {number} col col index\n * @param {number} remainingSafeCells number of safe cells\n * @returns {Object[]} board array of cell objects\n */\nconst isGameOver = (board, row, col, remainingSafeCells) => {\n    let gameOver = false;\n    let result = '';\n    if (board[row][col].isClicked) {\n        if (board[row][col].adjBombs === -1) {\n            gameOver = true;\n            result = 'lose';\n        } else if (!remainingSafeCells) {\n            gameOver = true;\n            result = 'win';\n        }\n    }\n    return {gameOver, result};    \n}\n\n/**\n * Reveals all cells on the board by making them \"clicked\".\n * @param {Object[]} board array of cell objects\n * @param {number} row number of rows\n * @param {number} col number of columns\n * @returns {Object[]} board new board of cell objects\n */\n// To do: When board is initialized, create a copy to track unclicked cells.\n// Whenever a cell is clicked, we remove it from the copied board. When we reveal,\n// loop through the copied board and change their \"isClicked\". Worst case scenario:\n// same # of operations (cols * rows - 1). Best case scenario: # of operations (# bombs)\nconst revealBoard = (board, rows, cols) => {\n    const newBoard = [...board];\n    for (let row = 0; row < rows; row++) {\n        for (let col = 0; col < cols; col++) {\n            newBoard[row][col].isClicked = true;\n        }\n    }\n    return newBoard;\n}\n\nexport { initBoard, isGameOver, revealBoard };","import React, { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport Cell from './cell.jsx';\nimport { initBoard, isGameOver, revealBoard } from '../../../game.js';\nimport { getNeighbors } from '../../../helper';\nimport './board.css';\n\n/**\n * Board with clickable cells to let users make a move and play the game.\n * @param {BoardProps} props board properties\n * @returns {JSX.Element} board view\n */\n\n/**\n * @typedef {Object} BoardProps\n * @prop {number} rows number of rows to place on board.\n * @prop {number} cols number of cols to place on board.\n * @prop {number} bombs number of bombs to place on board.\n * @prop {number} remainingSafeCells number of remaining safe cells.\n * @prop {function} changeRemainingSafeCells function to change remaining safe cells count.\n * @prop {function} setGameStatus function to set game status\n * @prop {Object} gameOver gameOver object \n */\n\nconst Board = props => {\n    const { rows, cols, bombs, remainingSafeCells, changeRemainingSafeCells, \n        gameOver, setGameStatus } = props;\n\n    const [board, setBoard] = useState(() => initBoard(rows, cols, bombs));\n    const [clickedCell, setClickedCell] = useState({row: null, col: null});\n    const isInitialRender = useRef(true);\n\n    useEffect(() => {\n        if (isInitialRender.current) {\n            isInitialRender.current = false;\n            return;\n        }\n        const { row, col } = clickedCell;\n        const gameOver = isGameOver(board, row, col, remainingSafeCells);\n        if (gameOver.gameOver) {\n            const revealedBoard = revealBoard(board, rows, cols);\n            setBoard(revealedBoard);\n            setGameStatus(gameOver);\n        }\n    }, [remainingSafeCells]);\n\n    /**\n     * Handles user click event on the board cells. Calls makeMove() to\n     * handle making the move.\n     * @param {UIEvent} event click event\n     */\n    const handleCellClick = e => {\n        if (!gameOver.gameOver) {\n            const rowCol = e.target.value.split('-');\n            const [row, col] = [parseInt(rowCol[0]), parseInt(rowCol[1])];\n            makeMove(row, col);\n        }\n    }\n\n    /**\n     * Makes the move by changing the \"clicked\" status, changing number of\n     * remaining safe cells, and recursively make moves if the cell has 0\n     * adjacent bombs.\n     * @param {number} row row index\n     * @param {number} col col index\n     */\n    const makeMove = (row, col) => {\n        if (!board[row][col].isClicked) {\n            let newBoard = [...board];\n            newBoard[row][col].isClicked = true;\n            setBoard(newBoard);\n            setClickedCell({...clickedCell, row, col});\n            changeRemainingSafeCells();\n            makeMoveRecursively(row, col);\n        }\n    }\n\n    /**\n     * If given cell has 0 adjacent bombs, gets all the neighbors and makes \n     * the move on all cells.\n     * @param {number} row row index\n     * @param {number} col col index\n     */\n    const makeMoveRecursively = (row, col) => {\n        if (board[row][col].adjBombs === 0) {\n            let neighbors = getNeighbors(board, row, col);\n            for (let neighbor of neighbors) {\n                makeMove (neighbor.row, neighbor.col);\n            }\n        }\n    }\n\n    const styles = {\n        height: {\n            height: `${100/rows}%`\n        }\n    }\n\n    return (\n        <div className='ms-board'>\n            {board.map((row, rowIndex) => {\n                return (\n                    <div className='ms-board-row' key={rowIndex} style={styles.height}>\n                        {row.map((cell, colIndex) => {\n                            return <Cell key={colIndex} {...cell} rowIndex={rowIndex} colIndex={colIndex} \n                                cellWidth={100/cols} handleCellClick={handleCellClick} />\n                        })}\n                    </div>\n                )\n            })}\n        </div>\n    );\n}\n\nBoard.propTypes = {\n    rows: PropTypes.number.isRequired,\n    cols: PropTypes.number.isRequired,\n    bombs: PropTypes.number.isRequired,\n    remainingSafeCells: PropTypes.number.isRequired,\n    changeRemainingSafeCells: PropTypes.func.isRequired,\n    setGameStatus: PropTypes.func.isRequired,\n    gameOver: PropTypes.object.isRequired,\n};\n\nexport default Board;","import React from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * Result provides the result of the game when it ends and allows a new game to be created.\n * @param {ResultProps} props result properties\n * @returns {JSX.Element} form view\n */\n\n/**\n * @typedef {Object} ResultProps\n * @prop {string} resultMsg result message to display\n * @prop {boolean} gameStart game start boolean\n * @prop {boolean} gameOver game over boolean\n * @prop {function} newGame function to start new game\n */\n\nconst Result = props => {\n    const { resultMsg, gameStart, gameOver, newGame } = props;\n\n    return (\n        <div className={`ms-result ${gameStart && gameOver ? 'show' : 'hide'}`}>\n            <p className='ms-result-msg'>{resultMsg}</p>\n            <div className='ms-new-game'>\n                <button className='btn' onClick={newGame}>New Game</button>\n            </div>\n        </div>\n    );\n};\n\nResult.propTypes = {\n    resultMsg: PropTypes.string.isRequired,\n    gameStart: PropTypes.bool.isRequired,\n    gameOver: PropTypes.bool.isRequired,\n    newGame: PropTypes.func.isRequired\n};\n\nexport default Result;","import React from 'react';\nimport './rules.css';\n\n/**\n * Rules lists the rules on how to play minesweeper.\n * @returns {JSX.Element} Rules view\n */\n\nconst Rules = () => {\n    return (\n        <div className='ms-rules col-md-8 offset-md-2'>\n            <h2 className='ms-rules-title'>How to Play</h2>\n            <ul className='ms-rules-list'>\n                <li className='ms-rule'>The board of cells contains a set number of bombs. </li>\n                <li className='ms-rule'>You lose if: you click on a cell containing a bomb.</li>\n                <li className='ms-rule'>You win if: you manage to click all the cells and avoid the bombs.</li>\n                <li className='ms-rule'>Clicking a cell that does not contain a bomb reveals the number of adjacent cells that contain bombs.\n                    Use this information and process of elimination to click on all cells without a bomb.\n                </li>\n            </ul>\n        </div>\n    )\n}\n\nexport default Rules;","import React, { useState } from 'react';\nimport Form from './form/form.jsx';\nimport Error from './form/error.jsx';\nimport Board from './board/board.jsx';\nimport Result from './form/result.jsx';\nimport Rules from './rules.jsx';\nimport './minesweeper.css';\n\n/**\n * Container for the game. Passes eventhandlers and state to dependent child components.\n * @returns {JSX.Element} form view\n */\n\n //To do: combine gameOver and gameStart state into gameStatus which is initialized as:\n //{gameStart: false, gameOver: false, remainingSafeCells: 0, win: false}. Have one \n //state updater function for game status related state.\nconst Minesweeper = () => {\n    const [gameStart, setGameStart] = useState(false);\n    const [gameOver, setGameOver] = useState({gameOver: false, result: ''});\n    const [remainingSafeCells, setRemainingSafeCells] = useState(0);\n\n    const [inputValues, setInputValues] = useState({\n        columns: '',\n        rows: '',\n        bombs: ''\n    });\n\n    const [error, setError] = useState({\n        isError: false,\n        msg: ''\n    });\n\n    /**\n     * Handles input change.\n     * @param {UIEvent} event input change event\n     */\n    const handleInputChange = e => {\n        const { name, value } = e.target;\n        setInputValues({...inputValues, [name]: value}); \n    };\n\n    const changeRemainingSafeCells = () => {\n        setRemainingSafeCells(remainingSafeCells => remainingSafeCells - 1);\n    }\n\n    /**\n     * Handles form submit by validating and setting values, removing error message, updating remaining safe cells and \n     * setting game start status.\n     * @param {UIEvent} event click event\n     */\n    //To do: minimum size board should be 1x2 or 2x1. Game should not be playable with 1x1 board.\n    const handleFormSubmit = e => {\n        e.preventDefault();\n        const dimension = inputValues.columns * inputValues.rows;\n        const pattern = /^[1-9][0-9]*$/;\n        let errorMsg = '';\n        for (let value in inputValues) {\n            if (!pattern.test(inputValues[value])) {\n                errorMsg += `${value.replace(value[0], value[0].toUpperCase())} `\n            }\n        }\n        errorMsg += errorMsg ? 'should be a positive number.' : '';\n        errorMsg += !errorMsg && inputValues.bombs >= dimension ?\n            '# of bombs cannot be equal or greater than # of cells' : ''\n        if (errorMsg) {\n            setError({...error, isError: true, msg: errorMsg});\n        } else {\n            const remainingSafeCells = dimension - inputValues.bombs;\n            setError({...error, isError: false, msg: ''});\n            setInputValues({...inputValues, \n                columns: parseInt(inputValues.columns),\n                rows: parseInt(inputValues.rows),\n                bombs: parseInt(inputValues.bombs)\n            });\n            setRemainingSafeCells(remainingSafeCells);\n            setGameStart(true);\n        }\n        \n    };\n\n    /**\n     * Wrapper function that calls another function to set gameOver state. Used by child components to\n     * update state that is passed down.\n     * @param {Object} gameStatus game status object\n     */\n    const setGameStatus = gameStatus => {\n        const { gameOver, result } = gameStatus;\n        if (gameStatus.gameOver) setGameOver({...gameOver, gameOver, result});\n    };\n\n    /**\n     * Wrapper function that calls another function to set gameStart, gameOver, and inputValues state. \n     * Used by child components to update state that is passed down.\n     */\n    const newGame = () => {\n        setGameStart(false);\n        setGameOver({...gameOver, gameOver: false, result: ''});\n        setInputValues({...inputValues, columns: '', rows: '', bombs: ''});\n    }\n\n    const formProps = {\n        inputValues,\n        handleInputChange,\n        handleFormSubmit\n    };\n\n    const errorProps = {\n        errorMsg: error.msg\n    };\n\n    const boardProps = {\n        rows: inputValues.rows,\n        cols: inputValues.columns,\n        bombs: inputValues.bombs,\n        gameOver,\n        remainingSafeCells,\n        changeRemainingSafeCells,\n        setGameStatus\n    };\n\n    const resultMsg = gameOver.gameOver ? `Game Over...You ${gameOver.result}.` : 'Game in Progress...';\n\n    return (\n        <main className='container'>\n            <div className='ms-header'>\n                <h1 className='ms-title'>Minesweeper</h1>\n            </div>\n            <div className='container'>\n                {gameStart ? <Result resultMsg={resultMsg} newGame={newGame} gameOver={gameOver.gameOver} gameStart={gameStart} /> : ''}\n                {error.isError ? <Error {...errorProps} /> : ''}\n                {!gameStart && !gameOver.gameOver ? <Form {...formProps} /> : ''}\n                {!gameStart ? <Rules /> : ''}\n                {gameStart ? <Board  {...boardProps} /> : ''}\n            </div>\n        </main>\n    );\n}\n\nexport default Minesweeper;","import React from 'react';\nimport './App.css';\nimport Minesweeper from './components/minesweeper/mineSweeper.jsx';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Minesweeper />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}